{"version":3,"sources":["components/MessageTelegram/MessageTelegram.module.css","components/MyName/MyName.module.css","components/Homework-3-4/Homework-3-4.module.css","components/MyName/MyName.jsx","components/MessageTelegram/MessageTelegram.jsx","components/Homework-3-4/SumNames/SumNames.jsx","components/Homework-3-4/NameInput/NameInput.jsx","components/Homework-3-4/AddNameBtn/AddNameBtn.jsx","components/Homework-3-4/ShowNames/ShowNames.jsx","components/Homework-3-4/Homework-3-4.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["module","exports","MyName","className","styles","myNameBlock","map","quality","i","specialQuality","key","MessageTelegram","props","messageWrap","avatar","src","alt","messageBlock","senderName","message","time","SumNames","ref","spanValue","names","length","NameInput","inputValue","type","AddNameBtn","onClick","addName","ShowNames","n","Homework34","current","value","setState","state","render","block","inputBlock","React","createRef","Component","App","date","Date","hours","getHours","min","getMinutes","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"kGACAA,EAAOC,QAAU,CAAC,YAAc,qCAAqC,OAAS,gCAAgC,aAAe,sCAAsC,WAAa,oCAAoC,QAAU,iCAAiC,KAAO,gC,gBCAtQD,EAAOC,QAAU,CAAC,YAAc,4BAA4B,eAAiB,+BAA+B,QAAU,0B,gBCAtHD,EAAOC,QAAU,CAAC,MAAQ,8B,uLCeXC,EAbA,WAEX,OACI,yBAAKC,UAAWC,IAAOC,aACnB,kLACA,mGACA,4BALU,CAAC,qEAAe,6CAAW,yDAAa,0DAMjCC,KAAI,SAACC,EAASC,GAAV,OAAgB,wBAAIL,UAAkB,IAANK,EAAWJ,IAAOK,eAAiBL,IAAOG,QAASG,IAAKF,GAAID,S,gBCS9GI,EAhBS,SAACC,GACrB,OACI,yBAAKT,UAAWC,IAAOS,aACnB,yBAAKV,UAAWC,IAAOU,OAClBC,IAAI,6GACJC,IAAI,QACT,yBAAKb,UAAWC,IAAOa,cACnB,wBAAId,UAAWC,IAAOc,YAAtB,yFACA,uBAAGf,UAAWC,IAAOe,SAArB,8PAEA,uBAAGhB,UAAWC,IAAOgB,MAAOR,EAAMQ,S,4DCLnCC,EANE,SAACT,GACd,OACI,0BAAMU,IAAKV,EAAMW,WAAjB,4DAAyCX,EAAMY,MAAMC,SCI9CC,EANG,SAACd,GACf,OACI,2BAAOU,IAAKV,EAAMe,WAAYC,KAAK,UCG5BC,EALI,SAACjB,GAChB,OACI,4BAAQkB,QAASlB,EAAMmB,SAAvB,aCMOC,EARG,SAACpB,GACf,OACI,6BACKA,EAAMY,MAAMlB,KAAK,SAAC2B,EAAGzB,GAAJ,OAAU,0BAAME,IAAKF,GAAIyB,EAAf,UCqCzBC,E,YAlCX,WAAYtB,GAAQ,IAAD,8BACf,4CAAMA,KAKVmB,QAAU,WACN,IAAIJ,EAAa,EAAKA,WAAWQ,QAAQC,MACzC,EAAKC,SAAL,eACO,EAAKC,MADZ,CAEId,MAAM,GAAD,mBAAM,EAAKc,MAAMd,OAAjB,CAAwBG,OAEjC,EAAKA,WAAWQ,QAAQC,MAAQ,IAZjB,EAgBnBE,MAAQ,CACJd,MAAO,IAjBQ,EAoBnBe,OAAS,WACL,OACI,yBAAKpC,UAAWC,IAAOoC,OACnB,kBAAC,EAAD,CAAUjB,UAAW,EAAKA,UAAWC,MAAO,EAAKc,MAAMd,QACvD,yBAAKrB,UAAWC,IAAOqC,YACnB,kBAAC,EAAD,CAAWd,WAAY,EAAKA,aAC5B,kBAAC,EAAD,CAAYI,QAAS,EAAKA,WAE9B,kBAAC,EAAD,CAAWP,MAAO,EAAKc,MAAMd,UA1BrC,EAAKG,WAAae,IAAMC,YACxB,EAAKpB,UAAYmB,IAAMC,YAHR,E,2BADED,IAAME,WCgBhBC,MAhBf,WACI,IAAIC,EAAO,IAAIC,KACXC,EAAQF,EAAKG,WACbC,EAAMJ,EAAKK,aACfH,EAASA,EAAQ,GAAT,WAAmBA,GAAUA,EACrCE,EAAOA,EAAM,GAAP,WAAiBA,GAAQA,EAC/B,IAAI9B,EAAI,UAAM4B,EAAN,YAAeE,GACvB,OACI,yBAAK/C,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAiBiB,KAAMA,IACvB,kBAAC,EAAD,QCNQgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASlB,OAAO,kBAAC,EAAD,MAASmB,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhD,c","file":"static/js/main.0149a5b6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageWrap\":\"MessageTelegram_messageWrap__YuAEc\",\"avatar\":\"MessageTelegram_avatar__881Cd\",\"messageBlock\":\"MessageTelegram_messageBlock__1scCD\",\"senderName\":\"MessageTelegram_senderName__28mqx\",\"message\":\"MessageTelegram_message__11yly\",\"time\":\"MessageTelegram_time__34h_Q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"myNameBlock\":\"MyName_myNameBlock__30pmt\",\"specialQuality\":\"MyName_specialQuality__3YRez\",\"quality\":\"MyName_quality__3503r\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Homework-3-4_block__3DcDB\"};","import React from \"react\";\r\nimport styles from \"./MyName.module.css\";\r\n\r\nconst MyName = () => {\r\n    let myQualities = ['Рационалист', 'Студент', 'Анимешник', 'Коммунист'];\r\n    return (\r\n        <div className={styles.myNameBlock}>\r\n            <h1>Басько Владимир Георгиевич</h1>\r\n            <h2>Мои качества</h2>\r\n            <ul>\r\n                {myQualities.map((quality, i) => <li className={(i === 1) ? styles.specialQuality : styles.quality} key={i}>{quality}</li>)}\r\n            </ul>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MyName;","import React from \"react\";\r\nimport styles from \"./MessageTelegram.module.css\";\r\n\r\nconst MessageTelegram = (props) => {\r\n    return (\r\n        <div className={styles.messageWrap}>\r\n            <img className={styles.avatar}\r\n                 src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQE8ONSyYrM-yJMooletyTZ-eHJF37_HHkP8SPxNHrGJ04X028k\"\r\n                 alt=\"ava\"/>\r\n            <div className={styles.messageBlock}>\r\n                <h3 className={styles.senderName}>Басько Владимир</h3>\r\n                <p className={styles.message}>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Cupiditate deleniti est ipsa molestias nam odit placeat praesentium quod recusandae tempora.\r\n                    aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</p>\r\n                <p className={styles.time}>{props.time}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default MessageTelegram;","import React from \"react\";\r\n\r\nconst SumNames = (props) => {\r\n    return (\r\n        <span ref={props.spanValue}>Всего имен: {props.names.length}</span>\r\n    )\r\n};\r\n\r\nexport default SumNames;","import React from \"react\";\r\n\r\nconst NameInput = (props) => {\r\n    return (\r\n        <input ref={props.inputValue} type=\"text\"/>\r\n    )\r\n};\r\n\r\nexport default NameInput;","import React from \"react\";\r\n\r\nconst AddNameBtn = (props) => {\r\n    return (\r\n        <button onClick={props.addName}>Add Name</button>\r\n    )\r\n};\r\nexport default AddNameBtn;","import React from \"react\";\r\n\r\nconst ShowNames = (props) => {\r\n    return (\r\n        <div>\r\n            {props.names.map( (n, i) => <span key={i}>{n} </span>)}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ShowNames;","import React from \"react\";\r\nimport styles from \"./Homework-3-4.module.css\"\r\nimport SumNames from \"./SumNames/SumNames\";\r\nimport NameInput from \"./NameInput/NameInput\";\r\nimport AddNameBtn from \"./AddNameBtn/AddNameBtn\";\r\nimport ShowNames from \"./ShowNames/ShowNames\";\r\n\r\nclass Homework34 extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.inputValue = React.createRef();\r\n        this.spanValue = React.createRef();\r\n    }\r\n\r\n    addName = () => {\r\n        let inputValue = this.inputValue.current.value;\r\n        this.setState({\r\n            ...this.state,\r\n            names: [...this.state.names, inputValue]\r\n        });\r\n        this.inputValue.current.value = '';\r\n        // alert(`Привет ${inputValue}`);\r\n    };\r\n\r\n    state = {\r\n        names: []\r\n    };\r\n\r\n    render = () => {\r\n        return (\r\n            <div className={styles.block}>\r\n                <SumNames spanValue={this.spanValue} names={this.state.names}/>\r\n                <div className={styles.inputBlock}>\r\n                    <NameInput inputValue={this.inputValue}/>\r\n                    <AddNameBtn addName={this.addName}/>\r\n                </div>\r\n                <ShowNames names={this.state.names}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homework34;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport MyName from \"./components/MyName/MyName\";\r\nimport MessageTelegram from \"./components/MessageTelegram/MessageTelegram\";\r\nimport Homework34 from \"./components/Homework-3-4/Homework-3-4\";\r\n\r\n\r\nfunction App() {\r\n    let date = new Date();\r\n    let hours = date.getHours();\r\n    let min = date.getMinutes();\r\n    hours = (hours < 10) ? `0${hours}` : hours;\r\n    min = (min < 10) ? `0${min}` : min;\r\n    let time = `${hours}:${min}`;\r\n    return (\r\n        <div className=\"App\">\r\n            <MyName/>\r\n            <MessageTelegram time={time}/>\r\n            <Homework34/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}